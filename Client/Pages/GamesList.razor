@page "/GamesList"
@using TriangleProject.Shared.Models.Unity;
@using TriangleProject.Shared.Models.Portelem;
@using TriangleProject.Shared.Models.Matchix;
@using System.Net.Http.Json;
@using System.Linq;
@inject HttpClient Http;
@inject NavigationManager Nav;

<h3>Games List</h3>

@if(GameList == null)
{
    <p>No Games Here!</p>
}
@if (GameList != null && user != null)
{

    <p>Add New Game</p>
    <input type="text" @bind="gameToAdd.GameName" />
    <input type="button" @onclick="CreateGame" value="Create Game" />

    <p>The Games of: @user.FirstName</p>
    <table>@*טבלה שתכיל את המשחקים של המשתמש המחובר*@
        <th>שם המשחק</th>
        <th>קוד המשחק</th>
        <th>מספר זוגות</th>
        <th>הגדרות</th>
        <th>עריכה</th>
        <th>פרסום משחק</th>
        <th>מחיקה</th>

        @foreach (Game game in GameList)
        {
            <tr>
                <td>@game.GameName</td>
                <td>@game.GameCode</td>
                <tb>@game.PairCount</tb>
                <td>@game.IsPublish</td>
                <td><input type="button" value="עריכה"/> </td>

                <td>
                    @if (game.canPublic == false)
                    {
                        <input type="checkbox" checked="@game.IsPublish"
                         @onchange="(() =>changePublish(game))" />
                    }
                    else
                    {
                    <input type="checkbox" disabled />// במצב שלא עובד בתנאים-אי אפשר ללחוץ
                    }

                </td>
                <td><input type="button" value="מחיקה" @onclick="()=> DeleteThisGame(game.ID)" /> </td>
            </tr>

        }
    </table>

    @if (msg != "")
    {
        <p>@msg</p>
        <input type="button" value="reload" @onclick=Navigate />
    }
}

@code {
    Game gameToAdd = new Game();
    // שליפת הפרמטר הגלובלי שנשמר עבור המשתמש שהתחבר מהפורטל"מ
    [CascadingParameter]
    public int UserId { get; set; }

    // פתיחת מופע חדש של המחלקה
    PortelemUser user;
    List<Game> GameList;
    string msg = "";

    // בעת טעינת העמוד
    protected override async Task OnInitializedAsync()
    {

        var userResult = await Http.GetAsync("api/portelem/activeuser");
        if(userResult.IsSuccessStatusCode)
        {
            user = await userResult.Content.ReadFromJsonAsync<PortelemUser>();
        }

        // פנייה לקונטרולר ושליפת המשחקים
        var gameListResult = await Http.GetAsync("api/games/" + UserId);
        if (gameListResult.IsSuccessStatusCode == true)
        {
            GameList = gameListResult.Content.ReadFromJsonAsync<List<Game>>().Result;
        }
        else
        {
            // נטפל במצבים שהיוזר לא רשאי לגשת אל המידע ונאכלס משתנה של הודעה בהתאם.
            string error = gameListResult.Content.ReadAsStringAsync().Result;
            ShowError(error);
        }
    }

    async Task CreateGame()
    {
        //שליחת המשחק החדש לקונטרולר
        Console.WriteLine(UserId);
        var userRes = await Http.PostAsJsonAsync("api/Games/" + UserId + "/addGame", (object) gameToAdd);
        if (userRes.IsSuccessStatusCode == true)
        {
            //החזרת המשחק והוספתו לרשימת המשחקים כדי שיתווסף לטבלה
            Game newGame = userRes.Content.ReadFromJsonAsync<Game>().Result;
            GameList.Add(newGame);
            gameToAdd.GameName = "";
        }
        else
        {

            string errorFromController = userRes.Content.ReadAsStringAsync().Result;
            ShowError(errorFromController);
        }
    }

    void ShowError(string error)//מאגר השגיאות הקיימות
    {
        switch (error)
        {
            case "No Session":
                msg = "Session error, please reload page";
                break;
            case "User Not Logged In":
                msg = "You are not logged in, please reload page to try again";
                break;
            case "User Not Found":
                msg = "the user details not found, please reload page to try again";
                break;
            case "Game not created":
                msg = "the game is not created, please try again later";
                break;
            case "Game code not created":
                msg = "Game code is not created";
                break;
        }
    }

    void Navigate()
    {
        Nav.NavigateTo("./", true);
    }

    protected async Task changePublish(Game game)
    {
        game.IsPublish = !game.IsPublish;//
        var userRes = await Http.PostAsJsonAsync("api/games/" + UserId + "/publishGame", game);// לבדוק למה אין אצלי שגיאה על זה- gameToSend
        if (userRes.IsSuccessStatusCode == true)
        {
            int index = GameList.IndexOf(game);//עדכון המצב בטבלת המשחקים
            GameList[index].IsPublish = !game.IsPublish;
        }
        else
        {
            string error = userRes.Content.ReadAsStringAsync().Result;

            //טיפול בשגיאות
            switch (error)
            {
                case "No Session":
                    msg = "Session error, please reload page";
                    break;
                case "User Not Logged In":
                    msg = "You are not logged in, please reload page to try again";
                    break;
                case "User Not Found":
                    msg = "the user details not found, please reload page to try again";
                    break;
                case "Game not created":
                    msg = "There was a problem creating the game";
                    break;
                case "Game code not created":
                    msg = "There was a problem generating the game code";
                    break;
                case "It's Not Your Game":
                    msg = "You tried to update a game that is not associated with your user";
                    break;
                case "This game cannot be published":
                    msg = "The game does not meet the conditions of publishing";
                    break;
            }
        }
    }

    private void DeleteThisGame(int id)
    {
        Console.WriteLine(id);
    }
}
